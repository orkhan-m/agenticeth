import { useEffect, useState } from "react";
import styles from "./OpenAiItem.module.css";
import OpenAI from "openai";
import NftCard from "./nftCard";
import Button from "./Button";
import { useAll } from "../contexts/AllContext";

export default function OpenAiItem() {
  const [imageUrl, setImageUrl] = useState("");
  const [nftHero, setNftHero] = useState("");
  const [nftFeature, setNftFeature] = useState("");
  const [nftAmount, setNftAmount] = useState(2);

  const { logIn } = useAll();

  // async function sendRequest() {
  //   const openai = new OpenAI({
  //     apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  //     dangerouslyAllowBrowser: true,
  //   });

  //   const completion = await openai.chat.completions.create({
  //     model: "gpt-4o-mini",
  //     messages: [
  //       { role: "system", content: "You are a helpful assistant." },
  //       {
  //         role: "user",
  //         content: "Write a haiku about recursion in programming.",
  //       },
  //     ],
  //     store: true,
  //   });
  //   console.log(completion.choices[0].message);
  //   return completion.choices[0].message;
  // }

  async function generateImage() {
    const openai = new OpenAI({
      apiKey: import.meta.env.VITE_OPENAI_API_KEY,
      dangerouslyAllowBrowser: true,
    });

    const response = await openai.images.generate({
      model: "dall-e-2",
      prompt: `Create a simple ${nftHero} character with a neutral background.`,
      n: 1,
      size: "512x512",
    });

    console.log("Response:");
    console.log(response);
    console.log("Response data:");
    console.log(response.data);
    let imgUrl = response.data[0].url;
    setImageUrl(imgUrl);
  }

  async function downloadImage(url) {
    const image = await fetch(url);
  }

  // useEffect(() => {
  //   generateImage();
  // }, []);

  // sendRequest();
  // generateImage();
  function handleSubmit(e) {
    e.preventDefault();
  }

  function inputNftHero(e) {
    setNftHero(e.target.value);
  }

  function inputNftFeature(e) {
    setNftFeature(e.target.value);
  }

  function handleNftAmountChange(e) {
    setNftAmount(parseInt(e.target.value));
  }

  return (
    <div className={styles.generateCollectionContainer}>
      <form onSubmit={handleSubmit} className={styles.inputContainer}>
        <div className={styles.inputNftCharacter}>
          <label>NFT Hero:</label>
          <input type="text" value={nftHero} onChange={inputNftHero} />
          <p>e.g., cat, dog, penguin, etc.</p>
        </div>
        <div className={styles.inputNftFeatures}>
          <label>NFT Hero Features:</label>
          <input type="text" value={nftFeature} onChange={inputNftFeature} />
          <p>e.g., country, professionas, etc.</p>
        </div>
        <div className={styles.inputNftNumber}>
          <label>Number of NFTs in Collection:</label>
          <div className={styles.selectNftNumber}>
            <label className={styles.inlineLabel}>
              <input
                type="radio"
                name="nftNumber"
                value="2"
                checked={nftAmount === 2}
                onChange={handleNftAmountChange}
              />
              2
            </label>
            <label>
              <input
                type="radio"
                name="nftNumber"
                value="3"
                checked={nftAmount === 3}
                onChange={handleNftAmountChange}
              />
              3
            </label>
            <label>
              <input
                type="radio"
                name="nftNumber"
                value="4"
                checked={nftAmount === 4}
                onChange={handleNftAmountChange}
              />
              4
            </label>
            <label>
              <input
                type="radio"
                name="nftNumber"
                value="5"
                checked={nftAmount === 5}
                onChange={handleNftAmountChange}
              />
              5
            </label>
          </div>
          <p>Only available options: 2-5</p>
        </div>
      </form>
      <div className={styles.buttonContainer}>
        <Button
          isDisabled={!(logIn && nftHero !== "" && nftFeature !== "")}
          handleClick={generateImage}
        >
          Generate Collection
        </Button>
      </div>
      <h2 className={styles.cardCanvasTitle}>NFT Workspace</h2>
      <div className={styles.cardCanvas}>
        <NftCard imageUrl="1.png" />
        <NftCard imageUrl="2.png" />
        <NftCard imageUrl="2.png" />
        <NftCard imageUrl="3.png" />
        <NftCard imageUrl="3.png" />
      </div>

      {/* {imageUrl ? (
        <img src={imageUrl} alt="Generated by OpenAI" />
      ) : (
        <p>Loading...</p>
      )} */}
    </div>
  );
}
